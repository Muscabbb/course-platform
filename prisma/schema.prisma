// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

enum Status {
  public
  private
}

enum LessonStatus {
  public
  private
  preview
}

enum Role {
  admin
  user
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String               @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId     String               @unique
  email           String               @unique
  name            String
  role            Role                 @default(user)
  imageUrl        String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
  courses         UserCourseAccess[]
  purchases       Purchase[]
  lessonsComplete UserLessonComplete[]
}

model Course {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  products    CourseProduct[]
  sections    CourseSection[]
  users       UserCourseAccess[]
}

model Product {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String
  price       Int
  status      Status          @default(private)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  Courses     CourseProduct[]
  Purchases   Purchase[]
}

model CourseProduct {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  productId String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, productId])
}

model CourseSection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  status    Status   @default(private)
  order     Int
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  lessons   Lesson[]
}

model Lesson {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  videoUrl      String
  status        LessonStatus         @default(private)
  duration      Int
  order         Int
  sectionId     String               @db.ObjectId
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  section       CourseSection        @relation(fields: [sectionId], references: [id])
  usersComplete UserLessonComplete[]
}

model UserCourseAccess {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}

model Purchase {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  pricePaidInCents Int
  productDetails   Json
  userId           String    @db.ObjectId
  productId        String    @db.ObjectId
  stripeSessionId  String    @unique
  refundAt         DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id])
  product          Product   @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model UserLessonComplete {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  lessonId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  lesson    Lesson   @relation(fields: [lessonId], references: [id])

  @@unique([userId, lessonId])
}
